// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VimServiceClient is the client API for VimService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VimServiceClient interface {
	// StartLocalNode starts a Node on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the vim/config.yaml
	//   3. all bytes constituting the Node YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalNode(ctx context.Context, opts ...grpc.CallOption) (VimService_StartLocalNodeClient, error)
	// StartFromPreviousNode starts a new Node based on a previous one.
	// If the previous Node does not have the can-replay condition set this call will result in an error.
	StartFromPreviousNode(ctx context.Context, in *StartFromPreviousNodeRequest, opts ...grpc.CallOption) (*StartNodeResponse, error)
	// StartNodeRequest starts a new Node based on its specification.
	StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*StartNodeResponse, error)
	// Searches for Node(s) known to this instance
	ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error)
	// Subscribe listens to new Node(s) updates
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VimService_SubscribeClient, error)
	// GetNode retrieves details of a single Node
	GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error)
	// Listen listens to Node updates and log output of a running Node
	Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (VimService_ListenClient, error)
	// StopNode stops a currently running Node
	StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*StopNodeResponse, error)
}

type vimServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVimServiceClient(cc grpc.ClientConnInterface) VimServiceClient {
	return &vimServiceClient{cc}
}

func (c *vimServiceClient) StartLocalNode(ctx context.Context, opts ...grpc.CallOption) (VimService_StartLocalNodeClient, error) {
	stream, err := c.cc.NewStream(ctx, &VimService_ServiceDesc.Streams[0], "/v1.VimService/StartLocalNode", opts...)
	if err != nil {
		return nil, err
	}
	x := &vimServiceStartLocalNodeClient{stream}
	return x, nil
}

type VimService_StartLocalNodeClient interface {
	Send(*StartLocalNodeRequest) error
	CloseAndRecv() (*StartNodeResponse, error)
	grpc.ClientStream
}

type vimServiceStartLocalNodeClient struct {
	grpc.ClientStream
}

func (x *vimServiceStartLocalNodeClient) Send(m *StartLocalNodeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *vimServiceStartLocalNodeClient) CloseAndRecv() (*StartNodeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(StartNodeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vimServiceClient) StartFromPreviousNode(ctx context.Context, in *StartFromPreviousNodeRequest, opts ...grpc.CallOption) (*StartNodeResponse, error) {
	out := new(StartNodeResponse)
	err := c.cc.Invoke(ctx, "/v1.VimService/StartFromPreviousNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vimServiceClient) StartNode(ctx context.Context, in *StartNodeRequest, opts ...grpc.CallOption) (*StartNodeResponse, error) {
	out := new(StartNodeResponse)
	err := c.cc.Invoke(ctx, "/v1.VimService/StartNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vimServiceClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (*ListNodesResponse, error) {
	out := new(ListNodesResponse)
	err := c.cc.Invoke(ctx, "/v1.VimService/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vimServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (VimService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &VimService_ServiceDesc.Streams[1], "/v1.VimService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &vimServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VimService_SubscribeClient interface {
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type vimServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *vimServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vimServiceClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	out := new(GetNodeResponse)
	err := c.cc.Invoke(ctx, "/v1.VimService/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vimServiceClient) Listen(ctx context.Context, in *ListenRequest, opts ...grpc.CallOption) (VimService_ListenClient, error) {
	stream, err := c.cc.NewStream(ctx, &VimService_ServiceDesc.Streams[2], "/v1.VimService/Listen", opts...)
	if err != nil {
		return nil, err
	}
	x := &vimServiceListenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VimService_ListenClient interface {
	Recv() (*ListenResponse, error)
	grpc.ClientStream
}

type vimServiceListenClient struct {
	grpc.ClientStream
}

func (x *vimServiceListenClient) Recv() (*ListenResponse, error) {
	m := new(ListenResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *vimServiceClient) StopNode(ctx context.Context, in *StopNodeRequest, opts ...grpc.CallOption) (*StopNodeResponse, error) {
	out := new(StopNodeResponse)
	err := c.cc.Invoke(ctx, "/v1.VimService/StopNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VimServiceServer is the server API for VimService service.
// All implementations must embed UnimplementedVimServiceServer
// for forward compatibility
type VimServiceServer interface {
	// StartLocalNode starts a Node on the Bhojpur.NET Platform directly.
	// The incoming requests are expected in the following order:
	//   1. metadata
	//   2. all bytes constituting the vim/config.yaml
	//   3. all bytes constituting the Node YAML that will be executed (that the config.yaml points to)
	//   4. all bytes constituting the gzipped Bhojpur.NET Platform application tar stream
	//   5. the Bhojpur.NET Platform application tar stream done marker
	StartLocalNode(VimService_StartLocalNodeServer) error
	// StartFromPreviousNode starts a new Node based on a previous one.
	// If the previous Node does not have the can-replay condition set this call will result in an error.
	StartFromPreviousNode(context.Context, *StartFromPreviousNodeRequest) (*StartNodeResponse, error)
	// StartNodeRequest starts a new Node based on its specification.
	StartNode(context.Context, *StartNodeRequest) (*StartNodeResponse, error)
	// Searches for Node(s) known to this instance
	ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error)
	// Subscribe listens to new Node(s) updates
	Subscribe(*SubscribeRequest, VimService_SubscribeServer) error
	// GetNode retrieves details of a single Node
	GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error)
	// Listen listens to Node updates and log output of a running Node
	Listen(*ListenRequest, VimService_ListenServer) error
	// StopNode stops a currently running Node
	StopNode(context.Context, *StopNodeRequest) (*StopNodeResponse, error)
	mustEmbedUnimplementedVimServiceServer()
}

// UnimplementedVimServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVimServiceServer struct {
}

func (UnimplementedVimServiceServer) StartLocalNode(VimService_StartLocalNodeServer) error {
	return status.Errorf(codes.Unimplemented, "method StartLocalNode not implemented")
}
func (UnimplementedVimServiceServer) StartFromPreviousNode(context.Context, *StartFromPreviousNodeRequest) (*StartNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartFromPreviousNode not implemented")
}
func (UnimplementedVimServiceServer) StartNode(context.Context, *StartNodeRequest) (*StartNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartNode not implemented")
}
func (UnimplementedVimServiceServer) ListNodes(context.Context, *ListNodesRequest) (*ListNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (UnimplementedVimServiceServer) Subscribe(*SubscribeRequest, VimService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedVimServiceServer) GetNode(context.Context, *GetNodeRequest) (*GetNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedVimServiceServer) Listen(*ListenRequest, VimService_ListenServer) error {
	return status.Errorf(codes.Unimplemented, "method Listen not implemented")
}
func (UnimplementedVimServiceServer) StopNode(context.Context, *StopNodeRequest) (*StopNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopNode not implemented")
}
func (UnimplementedVimServiceServer) mustEmbedUnimplementedVimServiceServer() {}

// UnsafeVimServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VimServiceServer will
// result in compilation errors.
type UnsafeVimServiceServer interface {
	mustEmbedUnimplementedVimServiceServer()
}

func RegisterVimServiceServer(s grpc.ServiceRegistrar, srv VimServiceServer) {
	s.RegisterService(&VimService_ServiceDesc, srv)
}

func _VimService_StartLocalNode_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VimServiceServer).StartLocalNode(&vimServiceStartLocalNodeServer{stream})
}

type VimService_StartLocalNodeServer interface {
	SendAndClose(*StartNodeResponse) error
	Recv() (*StartLocalNodeRequest, error)
	grpc.ServerStream
}

type vimServiceStartLocalNodeServer struct {
	grpc.ServerStream
}

func (x *vimServiceStartLocalNodeServer) SendAndClose(m *StartNodeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *vimServiceStartLocalNodeServer) Recv() (*StartLocalNodeRequest, error) {
	m := new(StartLocalNodeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _VimService_StartFromPreviousNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartFromPreviousNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VimServiceServer).StartFromPreviousNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VimService/StartFromPreviousNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VimServiceServer).StartFromPreviousNode(ctx, req.(*StartFromPreviousNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VimService_StartNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VimServiceServer).StartNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VimService/StartNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VimServiceServer).StartNode(ctx, req.(*StartNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VimService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VimServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VimService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VimServiceServer).ListNodes(ctx, req.(*ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VimService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VimServiceServer).Subscribe(m, &vimServiceSubscribeServer{stream})
}

type VimService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	grpc.ServerStream
}

type vimServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *vimServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VimService_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VimServiceServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VimService/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VimServiceServer).GetNode(ctx, req.(*GetNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VimService_Listen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListenRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VimServiceServer).Listen(m, &vimServiceListenServer{stream})
}

type VimService_ListenServer interface {
	Send(*ListenResponse) error
	grpc.ServerStream
}

type vimServiceListenServer struct {
	grpc.ServerStream
}

func (x *vimServiceListenServer) Send(m *ListenResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _VimService_StopNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VimServiceServer).StopNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.VimService/StopNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VimServiceServer).StopNode(ctx, req.(*StopNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VimService_ServiceDesc is the grpc.ServiceDesc for VimService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VimService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.VimService",
	HandlerType: (*VimServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartFromPreviousNode",
			Handler:    _VimService_StartFromPreviousNode_Handler,
		},
		{
			MethodName: "StartNode",
			Handler:    _VimService_StartNode_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _VimService_ListNodes_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _VimService_GetNode_Handler,
		},
		{
			MethodName: "StopNode",
			Handler:    _VimService_StopNode_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartLocalNode",
			Handler:       _VimService_StartLocalNode_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _VimService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Listen",
			Handler:       _VimService_Listen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vim.proto",
}
